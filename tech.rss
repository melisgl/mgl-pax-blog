<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Category Tech in G&#xE1;bor Melis&apos; Blog</title>
        <link>http://quotenil.com/tech.html</link>
        <description>Category Tech in G&#xE1;bor Melis&apos; Blog</description>
        <generator>xml-emitter</generator>
        <language>en-uk</language>
        <item>
            <title>PAX PDF Output</title>
            <link>http://quotenil.com/pax-pdf-output.html</link>
            <description>&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/paulapatience&quot; &gt;Paul A. Patience&lt;/a&gt;,
&lt;a href=&quot;https://github.com/melisgl/mgl-pax&quot; title=&quot;PAX&quot;&gt;PAX&lt;/a&gt; now has &lt;a href=&quot;https://github.com/melisgl/mgl-pax#x-28MGL-PAX-3A-PDF-OUTPUT-20MGL-PAX-3ASECTION-29&quot; &gt;PDF support&lt;/a&gt;. See
&lt;a href=&quot;http://quotenil.com/blog-files/pax-manual-v0.4.1.pdf&quot; &gt;pax-manual-v0.4.1.pdf&lt;/a&gt; and
&lt;a href=&quot;http://quotenil.com/blog-files/dref-manual-v0.4.1.pdf&quot; &gt;dref-manual-v0.4.1.pdf&lt;/a&gt;. The PDF is very similar
to the &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/&quot; &gt;HTML&lt;/a&gt;, even down to the locative types (e.g
&lt;code&gt;[function]&lt;/code&gt;) being linked to the sources on GitHub, but
cross-linking between PDFs doesn&apos;t work reliably on most viewers, so
that&apos;s disabled. Also, for reading PDFs so heavy on internal linking
to be enjoyable, one needs a viewer that supports going back within
the PDF (not the case with Chrome at the moment). Here is a blurry
screenshot to entice:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://quotenil.com/blog-files/pax-pdf-doc.png&quot; alt=&quot;pax-pdf-doc&quot; /&gt;&lt;/p&gt;
There is a bit of a Christmas tree effect due to syntax highlighting
and the colouring of the links. Blue links are internal to the PDF,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Maroon&quot; &gt;maroon&lt;/a&gt; links are external. I
might want to change that to make it look more like the HTML, but I
have not found a way on LaTeX to underline text without breaking
automatic hyphenation.
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Thu, 15 May 2025 02:00:00 +0200</pubDate>
        </item>
        <item>
            <title>Adaptive Hashing</title>
            <link>http://quotenil.com/adaptive-hashing.html</link>
            <description>&lt;p&gt;At the &lt;a href=&quot;https://www.european-lisp-symposium.org/2024/&quot; &gt;2024 ELS&lt;/a&gt;,
I gave a &lt;a href=&quot;https://quotenil.com/adaptive-hash-talk.pdf&quot; &gt;talk on adaptive
hashing&lt;/a&gt;, which
focusses on making general purpose hash tables &lt;em&gt;faster and more
robust&lt;/em&gt; at the same time.&lt;/p&gt;
&lt;h2&gt;Theory vs Practice&lt;/h2&gt;
&lt;p&gt;Hash table theory most concerns itself with the asymptotic
worst-case cost with a hash function chosen randomly from a family
of hash functions. Although these results are very relevant in
practice,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;those pesky constant factors, that the big-O cost ignores, do
  matter, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;we don&apos;t pick hash functions randomly but fix the hash function
  for the lifetime of the hash table.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are &lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_hash_function&quot; &gt;Perfect
Hashing&lt;/a&gt;
algorithms, that choose an optimal hash function for a given set of
keys. The drawback is that they either require the set of keys to be
fixed or they are too slow to be used as general purpose hash
tables.&lt;/p&gt;
&lt;p&gt;Still, the idea that we can do better by adapting the hash function
to the actual keys is key. Can we do that &lt;em&gt;online&lt;/em&gt;, that is, while
the hash table is being used? Potential performance gains come from
improving the constant factors mentioned above by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;having fewer collisions, and&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://quotenil.com/blog-files/cache-friendliness-regret.png&quot; alt=&quot;cache-friendliness-regret&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;being more cache-friendly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://quotenil.com/blog-files/cache-friendliness-put.png&quot; alt=&quot;cache-friendliness-put&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first image above plots the regret (the expected number of
comparisons of per lookup minus the minimum achievable) and the
measured run-time of PUT operations vs the number of keys in the
hash table with a particular key distribution. Green is Murmur (a
robust hash function), Blue is SBCL&apos;s expedient &lt;code&gt;EQ&lt;/code&gt;
hash. The wiggling of the graphs is due to the resizing of the hash
table as keys are added to it.&lt;/p&gt;
&lt;p&gt;Note how SBCL&apos;s regret starts out much lower and becomes much higher
than that of Murmur, but if anything, its advantage in run
time (second image) grows.&lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;The general idea is sound, but turning it into real performance
gains is hard due to the cost of choosing a hash function and
switching to it. First, we have to make some assumption about the
distribution of keys. In fact, default hash functions in language
runtimes often make such assumptions to make the common cases
faster, usually at the cost of weakened worst-case guarantees.&lt;/p&gt;
&lt;p&gt;The rest of this post is about how SBCL&apos;s built-in hash tables,
which had been reasonably fast, were modified. The core switching
mechanism looks at&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the length of the collision chain on PUT operations,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the collision count on rehash (when the hash table is grown), and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the size of the hash table.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Adapting &lt;code&gt;EQ&lt;/code&gt; hash tables&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Init to to constant hash function. This a fancy way of saying
   that we do linear search in a vector internally. This is an &lt;code&gt;EQ&lt;/code&gt;
   hash table, so key comparison is as single assembly instruction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the hash table is grown to more than 32 keys and it must be
   rehashed anyway, we switch to a hash function that does a single
   right shift with the number of bits to shift determined from the
   longest common run of low-bits in the keys.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If too many collisions, we switch to the previous default SBCL
   &lt;code&gt;EQ&lt;/code&gt;-hash function that has been tuned for a long time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If too many collisions, we switch to Murmur, a general purpose
   hash. We could also go all the way to cryptographic hashes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In step 2, the hash function with the single shift fits the memory
allocator&apos;s behaviour nicely: it is a perfect hash for keys forming
arithmetic sequences, which is often approximately true for objects
of the same type allocated in a loop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://quotenil.com/blog-files/adaptive-hash-eq-put.png&quot; alt=&quot;adaptive-hash-eq-put&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In this figure, the red line is the adaptive hash.&lt;/p&gt;
&lt;h3&gt;Adapting &lt;code&gt;EQUAL&lt;/code&gt; hash tables&lt;/h3&gt;
&lt;p&gt;For composite keys, running the hash function is the main cost.
Adaptive hashing does the following.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For string keys, hash only the first and last 2 characters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For list keys, only hash the first 4 elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If too many collisions, double the limit.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://quotenil.com/blog-files/adaptive-hash-string-put.png&quot; alt=&quot;adaptive-hash-string-put&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
So, SBCL hash tables have been adaptive for almost a year now,
gaining some speed in common cases, and robustness in others.&lt;/p&gt;
&lt;p&gt;The full paper is &lt;a href=&quot;https://zenodo.org/records/11091296&quot; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;http://quotenil.com/blog-files/adaptive-hash.png&quot; alt=&quot;adaptive-hashing&quot; /&gt;
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Fri, 02 May 2025 02:00:00 +0200</pubDate>
        </item>
        <item>
            <title>PAX and DRef v0.4</title>
            <link>http://quotenil.com/pax-v0.4.html</link>
            <description>&lt;p&gt;Version 0.4 of &lt;a href=&quot;https://github.com/melisgl/mgl-pax&quot; title=&quot;PAX&quot;&gt;PAX&lt;/a&gt;, the documentation system, and &lt;a href=&quot;https://github.com/melisgl/mgl-pax/tree/master/dref/&quot; title=&quot;DRef&quot;&gt;DRef&lt;/a&gt;, the
definition reifier, was released. There were large refactorings, bug
fixes, minor features, cosmetics, documentation and performance
improvements &lt;a href=&quot;https://github.com/melisgl/mgl-pax/commits/parse-word&quot; &gt;too numerous to
list&lt;/a&gt;. Here
is a summary of the new features and notable changes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DRef now supports
  &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/dref-manual.html#DREF:@DTYPES%20MGL-PAX:SECTION&quot; &gt;&lt;code&gt;DTYPE&lt;/code&gt;s&lt;/a&gt;,
  which allow filtering
  &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/dref-manual.html#DREF:DEFINITIONS%20FUNCTION&quot; &gt;&lt;code&gt;DEFINITIONS&lt;/code&gt;&lt;/a&gt;
  and
  &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/dref-manual.html#DREF:DREF-APROPOS%20FUNCTION&quot; &gt;&lt;code&gt;DREF-APROPOS&lt;/code&gt;&lt;/a&gt;
  results according to the locative type hierarchy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;definitions&lt;/span&gt;&lt;/i&gt; &apos;print&lt;/span&gt;)&lt;/span&gt;
==&amp;gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;#&amp;lt;DREF PRINT FUNCTION&amp;gt;
--&amp;gt;  #&amp;lt;DREF PRINT &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;UNKNOWN &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;:DEFOPTIMIZER&lt;/span&gt; PRINT SB-C:DERIVE-TYPE&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
--&amp;gt;  #&amp;lt;DREF PRINT &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;UNKNOWN
--&amp;gt;                &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;DECLAIM PRINT
--&amp;gt;                         &lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;SB-C:DEFKNOWN&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;definitions&lt;/span&gt;&lt;/i&gt; &apos;print &lt;span class=&quot;keyword&quot;&gt;:dtype&lt;/span&gt; &apos;&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;and t &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;not unknown&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
==&amp;gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;#&amp;lt;DREF PRINT FUNCTION&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;AND T&lt;/code&gt; bit restricts the query to definitions in the
running Lisp. The top of the &lt;code&gt;DTYPE&lt;/code&gt; hierarchy is
&lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/dref-manual.html#DREF:TOP%20DREF:DTYPE&quot; &gt;&lt;code&gt;DREF:TOP&lt;/code&gt;&lt;/a&gt;,
which includes external definitions such as the &lt;code&gt;CLHS&lt;/code&gt;, that comes
with PAX:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;definitions&lt;/span&gt;&lt;/i&gt; &apos;print &lt;span class=&quot;keyword&quot;&gt;:dtype&lt;/span&gt; &apos;&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;not unknown&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
==&amp;gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;#&amp;lt;DREF PRINT &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;CLHS &lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;FUNCTION&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt; #&amp;lt;DREF PRINT FUNCTION&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;dref-apropos &lt;span class=&quot;string&quot;&gt;&quot;method&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;:package&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;:dref&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;:external-only&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;:dtype&lt;/span&gt; &apos;class&lt;/span&gt;)&lt;/span&gt;
==&amp;gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;#&amp;lt;DREF METHOD CLASS&amp;gt; #&amp;lt;DREF METHOD-COMBINATION CLASS&amp;gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/dref-manual.html#DREF-EXT:@LOCATIVE-TYPE-HIERARCHY%20MGL-PAX:SECTION&quot; &gt;locative type
hierarchy&lt;/a&gt;
can be queried programmatically, and this information is included in their documentation (see for example &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/dref-manual.html#GENERIC-FUNCTION%20MGL-PAX:LOCATIVE&quot; &gt;the &lt;code&gt;GENERIC-FUNCTION&lt;/code&gt; locative type&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@PAX-LIVE-HOME-PAGE%20MGL-PAX:SECTION&quot; &gt;PAX Live Home
  Page&lt;/a&gt;
  better supports exploration without having to leave the browser.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It lists packages grouped by ASDF systems that define
  them (when this can be determined from the source locations).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It links to apropos pages for each locative type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It has an input box for looking up documentation right from
  the browser (as if with &lt;code&gt;mgl-pax-document&lt;/code&gt; from Emacs).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It has an input box for looking up apropos right from the
  browser (as if with &lt;code&gt;mgl-pax-apropos&lt;/code&gt; from Emacs).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The web server can be
  &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:ENSURE-WEB-SERVER%20FUNCTION&quot; &gt;started&lt;/a&gt;
  without Emacs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Completion of names and locatives in Emacs is much improved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New aliases were added to the &lt;code&gt;CLHS&lt;/code&gt; pages documenting format
  directives (e.g. &lt;code&gt;~F&lt;/code&gt;), standard macro characters (&lt;code&gt;#A&lt;/code&gt;) and loop
  keywords (&lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;:sum&lt;/code&gt;, &lt;code&gt;loop:sum&lt;/code&gt;), so that one can just
  &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@BROWSING-LIVE-DOCUMENTATION%20MGL-PAX:SECTION&quot; &gt;&lt;code&gt;C-.&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;mgl-pax-document&lt;/code&gt;)
  them. See the documentation of the &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:CLHS%20MGL-PAX:LOCATIVE&quot; &gt;&lt;code&gt;CLHS&lt;/code&gt;
  locative&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/dref-manual.html#DREF-EXT:@EXTENDING-DREF%20MGL-PAX:SECTION&quot; &gt;DRef extension
  api&lt;/a&gt;
  has been cleaned up.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Wed, 23 Apr 2025 02:00:00 +0200</pubDate>
        </item>
        <item>
            <title>On Multifaceted Development and the Role of Documentation</title>
            <link>http://quotenil.com/multifaceted-development.html</link>
            <description>&lt;p&gt;Catchy title, innit? I came up with it while trying to
name the development style &lt;a href=&quot;https://github.com/melisgl/mgl-pax&quot; title=&quot;PAX&quot;&gt;PAX&lt;/a&gt; enables. The original idea was
something vaguely self-explanatory in a straight out of a marketing
department kind of way, with tendrils right into your unconscious.
Documentation-driven development sounded just the thing, but it&apos;s
already taken. Luckily, I came to realize that neither documentation
nor any other single thing should drive development. Less luckily
for the philosophically disinclined, this epiphany unleashed my
inner &lt;a href=&quot;https://en.wikipedia.org/wiki/Richard_P._Gabriel&quot; &gt;Richard P.
Gabriel&lt;/a&gt;. I reckon
if there is a point to what follows, it&apos;s abstract enough to make it
hard to tell.&lt;/p&gt;
&lt;p&gt;In programming, there is always a formalization step involved: we
must go from idea to code. Very rarely, we have a formal definition
of the problem, but apart from purely theoretical exercises,
formalization always involves a jump of faith. It&apos;s like math word
problems: the translation from natural to formal language is out of
the scope of formal methods.&lt;/p&gt;
&lt;p&gt;We strive to shorten the jump by looking at the solution carefully
from different angles (code, docs, specs), by poking at it and
observing its behaviour (tests, logs, input-output, debugging).
These facets (descriptive or behavioural) of the solution are
redundant with the code and each other. This redundancy is our main
tool to shorten the jump. Ultimately, some faith will still be
required, but the hope is that if a thing looks good from several
angles and behaves well, then it&apos;s likely to be a good solution.
Programming is empirical.&lt;/p&gt;
&lt;p&gt;Tests, on the abstract level, have the same primary job as any other
facet: constrain the solution by introducing redundancy. If
automatic, they have useful properties: 1.&amp;nbsp;they are cheap to run;
2.&amp;nbsp;inconsistencies between code and tests are found automatically;
3.&amp;nbsp;they exert pressure to keep the code easily testable (when tracking
test coverage); 4.&amp;nbsp;sometimes it&apos;s easiest to start with writing the
tests. On the other hand, tests incur a maintenance cost (often
small compared to the gains).&lt;/p&gt;
&lt;p&gt;Unlike tests, documentation is mostly in natural language. This has
the following considerable disadvantages: documentation is expensive
to write and to check (must be read and compared to the
implementation, which involves humans for a short while longer),
consequently, it easily diverges from the code. It seems like the
wrong kind of redundancy. On the positive side, 1.&amp;nbsp;it is valuable
for users (e.g. user manual) and also for the programmer to
understand the intention; 2.&amp;nbsp;it encourages easily explainable
designs; 3.&amp;nbsp;sometimes it&apos;s easiest to start with writing the
documentation.&lt;/p&gt;
&lt;p&gt;Like tests or any other facet, documentation is not always needed,
it can drive the development process, or it can lag. But it is a
tremendously useful tool to encourage clean design and keep the code
comprehensible.&lt;/p&gt;
&lt;p&gt;Writing and maintaining good documentation is costly, but the cost
can vary greatly. Knuth&apos;s Literate Programming took the very
opinionated stance of treating documentation of internals as the
primary product, which is a great fit for certain types of problems.
PAX is much more mellow. It does not require a complete overhaul of
the development process or tooling; giving up interactive
development would be too high a price. PAX is chiefly about reducing
the distance between code and its documentation, so that they can be
changed together. By doing so, it reduces the maintenance cost,
improves both the design and the documentation, while making the
code more comprehensible.&lt;/p&gt;
&lt;p&gt;In summary,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Multiple, redundant facets are needed to have confidence in a
  solution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maintaining them has a cost.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This cost shapes the solution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no universally good set of facets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There need not be a primary facet to drive development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We mentally switch between facets frequently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our tools should make working with multiple facets easier.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
This is what PAX tries to do for documentation and code.
&lt;br&gt;
And that&apos;s the best 4KiB name I could come up with.
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Thu, 17 Aug 2023 02:00:00 +0200</pubDate>
        </item>
        <item>
            <title>Try in Emacs</title>
            <link>http://quotenil.com/try-in-emacs.html</link>
            <description>&lt;p&gt;&lt;a href=&quot;https://github.com/melisgl/try&quot; &gt;Try&lt;/a&gt;, my test anti-framework,
has just got light Emacs integration. Consider the following test:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;deftest&lt;/span&gt;&lt;/i&gt; test-foo &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;is &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;equal &lt;span class=&quot;string&quot;&gt;&quot;xxx&quot;&lt;/span&gt; 5&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;is &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;equal 7 7&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;with-failure-expected&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;t&lt;/span&gt;)&lt;/span&gt;
    &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;is &lt;span class=&quot;paren4&quot;&gt;(&lt;span class=&quot;code&quot;&gt;same-set-p &apos;&lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;1&lt;/span&gt;)&lt;/span&gt; &apos;&lt;span class=&quot;paren5&quot;&gt;(&lt;span class=&quot;code&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The test can be run from Lisp with &lt;code&gt;(test-foo)&lt;/code&gt; (interactive
debugging) or &lt;code&gt;(try &apos;test-foo)&lt;/code&gt; (non-interactive), but now there is
a third option: run it from Emacs and get a couple of conveniences
in return. In particular, with &lt;code&gt;M-x mgl-try&lt;/code&gt; then entering
&lt;code&gt;test-foo&lt;/code&gt;, a new buffer pops up with the test output, which is
font-locked based on the type of the outcome. The buffer also has
outline minor mode, which matches the hierarchical structure of the
output.&lt;/p&gt;
&lt;img src=&quot;http://quotenil.com/blog-files/try-emacs.png&quot; alt=&quot;try-emacs&quot; /&gt; The buffer&apos;s major mode is
Lisp, so &lt;code&gt;M-.&lt;/code&gt; and all the usual key bindings work. In additition,
a couple of keys bound to navigation commands are available. See the
&lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/try-manual.html#TRY:@TRY%2FEMACS%20MGL-PAX:SECTION&quot; &gt;documentation&lt;/a&gt;
for the details. Note that Quicklisp has an older version of Try
that does not have Emacs integration, so you&apos;ll need to use
&lt;a href=&quot;https://github.com/melisgl/try&quot; &gt;https://github.com/melisgl/try&lt;/a&gt;
until the next Quicklisp release.
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Mon, 14 Aug 2023 02:00:00 +0200</pubDate>
        </item>
        <item>
            <title>DRef and PAX v0.3</title>
            <link>http://quotenil.com/dref-and-pax-v0.3.html</link>
            <description>&lt;p&gt;&lt;code&gt;DEFSECTION&lt;/code&gt; needs to refer to definitions that do not create a
first-class object (e.g. stuff like &lt;code&gt;(*DOCUMENT-LINK-TO-HYPERSPEC*
VARIABLE)&lt;/code&gt;), and since its original release in 2014, a substantial
part of &lt;a href=&quot;https://github.com/melisgl/mgl-pax&quot; title=&quot;PAX&quot;&gt;PAX&lt;/a&gt; dealt with locatives and references, which reify
definitions. This release finally factors that code out into a
library called &lt;a href=&quot;https://github.com/melisgl/mgl-pax/tree/master/dref/&quot; title=&quot;DRef&quot;&gt;DRef&lt;/a&gt;, allowing PAX to focus on documentation. Being
very young, DRef lives under adult supervision, in a
&lt;a href=&quot;https://github.com/melisgl/mgl-pax/tree/master/dref&quot; &gt;subdirectory&lt;/a&gt;
of the PAX repository.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;DREF&amp;gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;definitions&lt;/span&gt;&lt;/i&gt; &apos;pax:document-object*&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;#&amp;lt;DREF DOCUMENT-OBJECT* GENERIC-FUNCTION&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;MGL-PAX-BLOG::CATEGORY T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;UNKNOWN-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;MGL-PAX::CLHS-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;MGL-PAX::INCLUDE-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;MGL-PAX::GO-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;GLOSSARY-TERM T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;SECTION T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;ASDF-SYSTEM-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;CLASS-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;STRUCTURE-ACCESSOR-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;WRITER-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;READER-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;ACCESSOR-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;SETF-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;VARIABLE-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;
 #&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;T T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;&lt;/span&gt;)&lt;/span&gt;

DREF&amp;gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;dref &apos;pax:document-object* &apos;&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;method nil &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;class-dref t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
#&amp;lt;DREF DOCUMENT-OBJECT* &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;METHOD NIL &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;CLASS-DREF T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;gt;

DREF&amp;gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;arglist *&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;DREF STREAM&lt;/span&gt;)&lt;/span&gt;
:ORDINARY

DREF&amp;gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;docstring **&lt;/span&gt;)&lt;/span&gt;
&quot;For definitions with a CLASS locative, the arglist printed is the
list of immediate superclasses with STANDARD-OBJECT, CONDITION and
non-exported symbols omitted.&quot;

DREF&amp;gt; &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;pax:document &lt;span class=&quot;special&quot;&gt;***&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
- [method] DOCUMENT-OBJECT* &lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;DREF CLASS-DREF&lt;/span&gt;)&lt;/span&gt; STREAM

    For definitions with a CLASS locative, the arglist printed is the
    list of immediate superclasses with STANDARD-OBJECT, CONDITION and
    non-exported symbols omitted.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;During the refactoring, the references API was cleaned up. How to
write extensions has seen lots of changes (see &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/dref-manual.html#DREF-EXT:@EXTENDING-DREF%20MGL-PAX:SECTION&quot; &gt;Extending
DRef&lt;/a&gt;
and &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@EXTENSION-API%20MGL-PAX:SECTION&quot; &gt;Extending
PAX&lt;/a&gt;),
but normal use is the same. DRef is similar to Shinmera&apos;s
&lt;a href=&quot;https://github.com/Shinmera/definitions&quot; &gt;Definitions&lt;/a&gt; library but
is more tailored to the needs of PAX.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;Also in this release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@APROPOS%20MGL-PAX:SECTION&quot; &gt;Apropos&lt;/a&gt;
  got a detailed view feature, which includes the docstrings of all
  listed definitions not just the reference itself. This is very
  useful for getting an overview of a package.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://quotenil.com/blog-files/alexandria-apropos.png&quot; alt=&quot;alexandria-apropos&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The detailed view often has to render docstrings which have not
  been written with PAX in mind and are not proper markdown. These
  docstrings are now sanitized aggressively in a unavoidably
  &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@MARKDOWN-IN-DOCSTRINGS%20MGL-PAX:SECTION&quot; &gt;heuristic
  manner&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are now two supported CSS styles for HTML output: &lt;code&gt;:DEFAULT&lt;/code&gt;
  with &lt;code&gt;sans-serif&lt;/code&gt; and &lt;code&gt;:CHARTER&lt;/code&gt; with Charter as the main
  font (which is bundled). The &lt;code&gt;:CHARTER&lt;/code&gt; style is used in the linked
  PAX World documentation on this blog. See
  &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:*BROWSE-HTML-STYLE*%20VARIABLE&quot; &gt;&lt;code&gt;PAX:*BROWSE-HTML-STYLE*&lt;/code&gt;&lt;/a&gt;
  and
  &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:UPDATE-ASDF-SYSTEM-HTML-DOCS%20FUNCTION&quot; &gt;&lt;code&gt;PAX:UPDATE-ASDF-SYSTEM-HTML-DOCS&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As usual, quite a few bug fixes and some optimizations also found
  their way into this release.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Wed, 26 Jul 2023 02:00:00 +0200</pubDate>
        </item>
        <item>
            <title>PAX Live Documentation Browser</title>
            <link>http://quotenil.com/pax-browser.html</link>
            <description>&lt;p&gt;PAX got a &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@BROWSING-LIVE-DOCUMENTATION%20MGL-PAX:SECTION&quot; &gt;live documentation
browser&lt;/a&gt; to make documentation generation a
more interactive experience. A great thing about Lisp development is
changing a single function and quickly seeing how it behaves without
the delay of a full recompile. Previously, editing a docstring
required regenerating the full documentation to see how the changes
turned out. The live documentation browser does away with this step,
which tightens the edit/document loop.&lt;/p&gt;
&lt;p&gt;PAX also got an &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@APROPOS%20MGL-PAX:SECTION&quot; &gt;apropos browser&lt;/a&gt;. It could always
generate documentation for stuff not written with PAX in mind, so
with the live browser already implemented, this was a just a small
add-on.&lt;/p&gt;
&lt;p&gt;The trouble with interactivity is, of course, that it&apos;s difficult to
get the point across in text, so I made two short videos that
demonstrate the basics.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://youtu.be/vH9hpk_Yirw&quot; &gt;Live browsing with w3m&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://youtu.be/ilPRgwKZkeo&quot; &gt;Live browsing with other browsers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Sat, 10 Jun 2023 02:00:00 +0200</pubDate>
        </item>
        <item>
            <title>Grid Typesetting</title>
            <link>http://quotenil.com/grid-typesetting.html</link>
            <description>I put the sources of the Two-Tailed Averaging paper on
&lt;a href=&quot;https://github.com/melisgl/two-tailed-averaging&quot; &gt;github&lt;/a&gt;. Of
course, the sources are also available on
&lt;a href=&quot;https://arxiv.org/abs/2209.12581&quot; &gt;arxiv&lt;/a&gt;, but this may give better
visibility to the LaTeX grid typesetting code in there. Also, note
how much cleaner the paper looks with the
&lt;a href=&quot;https://github.com/melisgl/two-tailed-averaging/blob/main/samples/xcharter.pdf&quot; &gt;XCharter&lt;/a&gt;
font compared to &lt;a href=&quot;https://github.com/melisgl/two-tailed-averaging/blob/main/samples/times-new-roman.pdf&quot; &gt;Times New
Roman&lt;/a&gt;.
No wonder Matthew Butterick &lt;a href=&quot;https://practicaltypography.com/charter.html&quot; &gt;pushes
Charter&lt;/a&gt;. By the way,
see what he has to say about
&lt;a href=&quot;https://practicaltypography.com/grids.html&quot; &gt;grids&lt;/a&gt; and baseline
grids, in particular.
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Mon, 17 Apr 2023 02:00:00 +0200</pubDate>
        </item>
        <item>
            <title>Normalize Fonts for Comparison</title>
            <link>http://quotenil.com/how-to-compare-fonts.html</link>
            <description>&lt;p&gt;In short, comparing fonts at the same font size is almost never the
right thing to do. Compare them at the same x-height or, better yet,
at the same space usage.&lt;/p&gt;
&lt;p&gt;In full, recently I wanted to choose a font that looks good on
screen at various resolutions and also in print. This is fairly
subjective, of course, so there is a lot of noise out there. Going
by the &lt;a href=&quot;https://tug.org/FontCatalogue/&quot; &gt;LaTeX Font Catalogue&lt;/a&gt;,
&lt;a href=&quot;https://fonts.google.com/&quot; &gt;Google Fonts&lt;/a&gt; and similar font
comparison sites turned out to be fairly misleading because they
present fonts at the same font
size (&lt;a href=&quot;https://en.wikipedia.org/wiki/Em_(typography)&quot; &gt;&lt;code&gt;em&lt;/code&gt;&lt;/a&gt; in LaTeX
and CSS). The problem is that &lt;code&gt;1em&lt;/code&gt; is the size of a bounding box
for the largest character, which can be arbitrarily loose. The
perceived size of typical English text is much more closely
determined by the
&lt;a href=&quot;https://en.wikipedia.org/wiki/X-height&quot; &gt;x-height&lt;/a&gt; (&lt;code&gt;ex&lt;/code&gt; in LaTeX
and CSS). &lt;code&gt;1ex&lt;/code&gt; is the height of the character &lt;code&gt;x&lt;/code&gt;, which is pretty
close to the height of other lowercase characters for most fonts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://quotenil.com/blog-files/Typography_Line_Terms.svg&quot; alt=&quot;typography-line-terms&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So it makes a lot of sense to compare fonts at the same x-height,
and this is what I first did for a number of LaTeX fonts:
&lt;a href=&quot;http://quotenil.com/blog-files/fonts-by-x-height.pdf&quot; &gt;fonts-by-x-height.pdf&lt;/a&gt;. On the
other hand, normalizing for x-height can make fonts with wider
glyphs look much bigger in the &lt;a href=&quot;http://www.hardcoregaming101.net/eye-of-the-beholder/&quot; &gt;eye of the
beholder&lt;/a&gt;.
Thus, the obvious alternative is to normalize the space usage.
Unfortunately, there is no convenient statistic available for this,
so we have to resort to estimating the area required to set a given
piece of reference text with a given font. The advantage of this
method is that it takes
&lt;a href=&quot;https://en.wikipedia.org/wiki/Kerning&quot; &gt;kerning&lt;/a&gt; into account, the
disadvantage is that we must now choose the line height, which is
quite an &lt;a href=&quot;https://medium.com/towards-more-beautiful-web-typography/optimal-line-height-reconsidered-part-1-web-dev-survey-from-kyoto-a0357d8f6282&quot; &gt;art in
itself&lt;/a&gt;.
Based on the assumption that the amount visual separation between
lines is the main factor that determines the difficulty of scanning
lines, here I decided to keep the ratio of line height and x-height
constant. Of course, other factors such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Cap_height&quot; &gt;cap
height&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ascender_(typography)&quot; &gt;ascenders&lt;/a&gt;,
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Descender&quot; &gt;descenders&lt;/a&gt; also
matter in general, but for the fonts considered, they didn&apos;t vary
strongly enough in addition to x-height to make them change the
results: &lt;a href=&quot;http://quotenil.com/blog-files/fonts-by-space.pdf&quot; &gt;fonts-by-space.pdf&lt;/a&gt;. Have a
look and decide for yourself which fonts look best. To me, the most
legible fonts are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Libertinus and Stix2 in the Timeslike category,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cochineal (Amiri, Crimson Text) among the Garamondlike,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;XCharter among the (almost) Slab Serifs,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Utopia among the Transitional Serifs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
My taste is apparently quite similar to &lt;a href=&quot;https://github.com/linoferreira/latex-font-survey&quot; &gt;Lino
Ferreira&apos;s&lt;/a&gt;. EB
Garamond is a personal favourite, but it is just a bit too quirky
for body text. Those same quirks make it great at larger sizes
though, and this blog uses it for headings in addition to XCharter
for the body text.
&lt;div class=&apos;br&apos;&gt;&lt;/div&gt;&lt;p&gt;The messy LaTeX sources of the above documents are available on
&lt;a href=&quot;https://github.com/melisgl/latex-font-comparison&quot; &gt;github&lt;/a&gt;.&lt;/p&gt;&lt;div class=&apos;br&apos;&gt;&lt;/div&gt;&lt;p&gt;Comment on
&lt;a href=&quot;https://twitter.com/GaborMelis/status/1645484950957830144&quot; &gt;Twitter&lt;/a&gt;
or &lt;a href=&quot;https://mastodon.social/@melisgl/110175790416538571&quot; &gt;Mastodon&lt;/a&gt;.&lt;/p&gt;
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Mon, 10 Apr 2023 02:00:00 +0200</pubDate>
        </item>
        <item>
            <title>PAX v0.1</title>
            <link>http://quotenil.com/pax-v0.1.html</link>
            <description>&lt;p&gt;&lt;a href=&quot;https://github.com/melisgl/mgl-pax&quot; title=&quot;PAX&quot;&gt;PAX&lt;/a&gt; v0.1 is released. At this point, I consider it fairly
complete. Here is the changelog for the last year or so.&lt;/p&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To reduce deployment size, made the MGL-PAX system &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#x-28-22mgl-pax-22-20ASDF-2FSYSTEM-3ASYSTEM-29&quot; &gt;autoload navigation, documentation generation, and transcription code&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Symbols in the CL package are &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#x-28MGL-PAX-3A-2ADOCUMENT-LINK-TO-HYPERSPEC-2A-20VARIABLE-29&quot; &gt;linked to the hyperspec&lt;/a&gt; like this: &lt;code&gt;PRINT&lt;/code&gt;, which renders as &lt;a href=&quot;http://www.lispworks.com/documentation/HyperSpec/Body/f_wr_pr.htm&quot; title=&quot;PRINT (MGL-PAX:CLHS FUNCTION)&quot;&gt;&lt;code&gt;PRINT&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hyperspec sections and issues can be linked to with the &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#x-28MGL-PAX-3ACLHS-20MGL-PAX-3ALOCATIVE-29&quot; &gt;&lt;code&gt;CLHS&lt;/code&gt; locative&lt;/a&gt; like this: &lt;code&gt;[lambda lists][CLHS]&lt;/code&gt;, which renders as &lt;a href=&quot;http://www.lispworks.com/documentation/HyperSpec/Body/03_d.htm&quot; title=&quot;&amp;quot;3.4&amp;quot; (MGL-PAX:CLHS MGL-PAX:SECTION)&quot;&gt;lambda lists&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added support for &lt;code&gt;[see this][foo function]&lt;/code&gt; and &lt;code&gt;[see this][foo]&lt;/code&gt; style of &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#x-28MGL-PAX-3A-40MGL-PAX-LINKING-TO-CODE-20MGL-PAX-3ASECTION-29&quot; &gt;linking&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#x-28DECLARATION-20MGL-PAX-3ALOCATIVE-29&quot; &gt;&lt;code&gt;DECLARATION&lt;/code&gt; locative&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#x-28READTABLE-20MGL-PAX-3ALOCATIVE-29&quot; &gt;&lt;code&gt;READTABLE&lt;/code&gt; locative&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#x-28MGL-PAX-3ASYMBOL-MACRO-20MGL-PAX-3ALOCATIVE-29&quot; &gt;&lt;code&gt;SYMBOL-MACRO&lt;/code&gt; locative&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#x-28METHOD-COMBINATION-20MGL-PAX-3ALOCATIVE-29&quot; &gt;&lt;code&gt;METHOD-COMBINATION&lt;/code&gt; locative&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:EXPORTABLE-REFERENCE-P%20GENERIC-FUNCTION&quot; &gt;&lt;code&gt;EXPORTABLE-REFERENCE-P&lt;/code&gt;&lt;/a&gt; to allow specializing decisions on whether to export a symbol in &lt;code&gt;DEFPOST&lt;/code&gt; based on &lt;code&gt;SECTION-PACKAGE&lt;/code&gt;. PAX no longer exports its documentation and drops the &lt;code&gt;MGL-PAX-&lt;/code&gt; prefix from names like &lt;code&gt;@MGL-PAX-LINKS&lt;/code&gt; to reduce clutter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:*DOCUMENT-DOWNCASE-UPPERCASE-CODE*%20VARIABLE&quot; &gt;Downcasing&lt;/a&gt; now works well and is the default for PAX World.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@UNRESOLVABLE-REFLINKS%20MGL-PAX:SECTION&quot; &gt;Warn on unresolvable reflinks&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Transcribe&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Transcription consistency checking is now &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#MGL-PAX:@TRANSCRIPT-FINER-GRAINED-CONSISTENCY-CHECKS%20MGL-PAX:SECTION&quot; &gt;customizable&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Transcription consistency checking and dynamic environment &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#MGL-PAX:@TRANSCRIPT-DYNENV%20MGL-PAX:SECTION&quot; &gt;can be controlled for code blocks&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Errors during transcribing are &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@TRANSCRIPT-API%20MGL-PAX:SECTION&quot; &gt;included&lt;/a&gt; in the transcript.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Portability&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tested on ABCL, AllegroCL, CCL, CLISP, CMUCL, ECL, and SBCL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SLIME &lt;code&gt;M-.&lt;/code&gt; is now as capable on all Lisps as the Swank implementation allows.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Generalized, cleaned up, and documented handling &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#toc-6-2-parsing&quot; &gt;trimming of punctuation and plurals&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;DOCUMENT&lt;/code&gt; &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:DOCUMENT-OBJECT%20%28METHOD%20NIL%20%28STRING%20T%29%29&quot; &gt;works on &lt;code&gt;STRING&lt;/code&gt;s&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Autolinking for the same name happens at most &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#x-28MGL-PAX-3A-2ADOCUMENT-LINK-CODE-2A-20VARIABLE-29&quot; &gt;once per docstring&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Within the same docstring explicit links (in addition to autolinks) also &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@SUPPRESSED-LINKS%20MGL-PAX:SECTION&quot; &gt;prevent subsequent autolinking of the same object&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/mgl-pax-manual.html#x-28CLASS-20MGL-PAX-3ALOCATIVE-29&quot; &gt;Unexported superclasses are not listed&lt;/a&gt; in the generated documentation of classes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Introduced &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@OVERVIEW-OF-ESCAPING%20MGL-PAX:SECTION&quot; &gt;double backslash escapes&lt;/a&gt; to prevent downcasing in addition to linking.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed &lt;a href=&quot;http://www.lispworks.com/documentation/HyperSpec/Body/f_desc_1.htm&quot; title=&quot;DESCRIBE-OBJECT (MGL-PAX:CLHS GENERIC-FUNCTION)&quot;&gt;&lt;code&gt;DESCRIBE-OBJECT&lt;/code&gt;&lt;/a&gt; method on &lt;code&gt;SECTION&lt;/code&gt;s. Call &lt;code&gt;DOCUMENT&lt;/code&gt; directly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Made URLs in the generated documentation more stable across implementations and &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:*DOCUMENT-URL-VERSIONS*%20VARIABLE&quot; &gt;made them more human readable&lt;/a&gt;. Existing URLs still work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exported api for &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@EXTENDING-DOCUMENT%20MGL-PAX:SECTION&quot; &gt;extending &lt;code&gt;DOCUMENT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:@EXTENDING-FIND-SOURCE%20MGL-PAX:SECTION&quot; &gt;FIND-SOURCE&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://melisgl.github.io/mgl-pax-world/pax-manual.html#MGL-PAX:DOCUMENT%20FUNCTION&quot; &gt;&lt;code&gt;DOCUMENT&lt;/code&gt;&lt;/a&gt; can produce reasonably readable output with &lt;code&gt;:FORMAT&lt;/code&gt; &lt;code&gt;:PLAIN&lt;/code&gt; (the default). It is now suitable for use in the REPL as a kind of replacement for &lt;a href=&quot;http://www.lispworks.com/documentation/HyperSpec/Body/f_docume.htm&quot; title=&quot;DOCUMENTATION (MGL-PAX:CLHS GENERIC-FUNCTION)&quot;&gt;&lt;code&gt;CL:DOCUMENTATION&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bugs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Made Emacs-side parsing for &lt;code&gt;M-.&lt;/code&gt; navigation more robust.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixed documentation generation on &lt;a href=&quot;http://www.lispworks.com/documentation/HyperSpec/Body/m_tracec.htm&quot; title=&quot;TRACE (MGL-PAX:CLHS MGL-PAX:MACRO)&quot;&gt;&lt;code&gt;TRACE&lt;/code&gt;&lt;/a&gt;d functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixed lots of minor bugs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Internals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tests moved to &lt;a href=&quot;https://github.com/melisgl/try&quot; &gt;Try&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added lost of tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Made documentation generation faster especially for small jobs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved error reporting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Autoloading no longer produces warnings on SBCL and fresh SLIME.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Wed, 16 Feb 2022 01:00:00 +0100</pubDate>
        </item>
        <item>
            <title>Migration to Github</title>
            <link>http://quotenil.com/migration-to-github.html</link>
            <description>&lt;p&gt;Due to the bash security hole that keeps
&lt;a href=&quot;http://seclists.org/oss-sec/2014/q3/685&quot; &gt;giving&lt;/a&gt;, I had to disable
gitweb at &lt;a href=&quot;http://quotenil.com/git/&quot; &gt;http://quotenil.com/git/&lt;/a&gt; and
move all non-obsolete code over to github. This affects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/melisgl/six&quot; &gt;Six the Hex AI&lt;/a&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/melisgl/planet-wars&quot; &gt;the Planet Wars bot&lt;/a&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/melisgl/micmac&quot; &gt;MiCMaC&lt;/a&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/melisgl/fsvd&quot; &gt;FSVD&lt;/a&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/melisgl/lassie&quot; &gt;Lassie&lt;/a&gt;, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/melisgl/cl-libsvm&quot; &gt;cl-libsvm&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Thu, 25 Sep 2014 02:00:00 +0200</pubDate>
        </item>
        <item>
            <title>Hung Connections</title>
            <link>http://quotenil.com/hung-connections.html</link>
            <description>&lt;p&gt;My ISP replaced a Thomson modem with a Cisco
EPC3925 modem-router to fix the speed issue I was having. The good
news is that the connection operates near its advertised bandwidth,
the bad news is that tcp connections started to hang. It didn&apos;t take
long to &lt;a href=&quot;http://hup.hu/node/98496&quot; &gt;find out&lt;/a&gt; that this particular
router drops &amp;quot;unused&amp;quot; tcp connections after five minutes.&lt;/p&gt;
&lt;p&gt;The fix recommended in the linked topic (namely &lt;code&gt;sysctl&lt;/code&gt;ing
&lt;code&gt;net.ipv4.tcp_keepalive_time&lt;/code&gt; &amp;amp; co) was mostly effective, but I had
to lower the keepalive to one minute to keep my ssh sessions alive.
The trouble was that OfflineIMAP connections to the U.S. west coast
still hanged intermittently, while it could work with Gmail just
fine.&lt;/p&gt;
&lt;p&gt;In the end, OfflineIMAP had to be
&lt;a href=&quot;http://permalink.gmane.org/gmane.mail.imap.offlineimap.general/2815&quot; &gt;patched&lt;/a&gt;
to use the keepalive and the keepalive be lowered to 15s:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sysctl -w net.ipv4.tcp_keepalive_time=15 \
          net.ipv4.tcp_keepalive_intvl=15 \
          net.ipv4.tcp_keepalive_probes=20
&lt;/code&gt;&lt;/pre&gt;
Oh, and always include &lt;code&gt;socktimeout&lt;/code&gt; in the OfflineIMAP config.
That&apos;s more important than keepalive unless you never have network
issues.
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Sun, 27 Feb 2011 01:00:00 +0100</pubDate>
        </item>
        <item>
            <title>OfflineIMAP with Encrypted Authinfo</title>
            <link>http://quotenil.com/offlineimap-with-encrypted-authinfo.html</link>
            <description>&lt;p&gt;I&apos;ve moved to an &lt;a href=&quot;http://offlineimap.org/&quot; &gt;OfflineIMAP&lt;/a&gt; +
&lt;a href=&quot;http://gnus.org/&quot; &gt;Gnus&lt;/a&gt; setup that&apos;s outlined at
&lt;a href=&quot;http://sachachua.com/blog/2008/05/geek-how-to-use-offlineimap-and-the-dovecot-mail-server-to-read-your-gmail-in-emacs-efficiently/&quot; &gt;various&lt;/a&gt;
&lt;a href=&quot;http://nakkaya.com/2010/04/10/using-offlineimap-with-gnus/&quot; &gt;places&lt;/a&gt;.
Gnus can be configured to use
&lt;a href=&quot;http://www.emacswiki.org/emacs-en/GnusAuthinfo&quot; &gt;&lt;code&gt;~/.authinfo&lt;/code&gt;&lt;/a&gt; as a
netrc style of file to read passwords from and can easily use
&lt;a href=&quot;http://www.emacswiki.org/emacs-en/GnusEncryptedAuthInfo&quot; &gt;encrypted
authinfo&lt;/a&gt;
files as well. Offlineimap, on the other hand, offers no such
support, and passwords to the local and remote imap accounts are
normally stored in clear text in &lt;code&gt;.offlineimaprc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the local account, this can be overcome by not running a Dovecot
server but making offlineimap spawn a dovecot process when needed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Repository LocalGmail]
type = IMAP
preauthtunnel = /usr/sbin/dovecot -c ~/.dovecot.conf --exec-mail imap
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the remote connection, ideally it should read the password from
&lt;code&gt;.authinfo.gpg&lt;/code&gt;, that Gnus may also read if it&apos;s configured to
access the remote server directly. This can be pulled off rather
easily. Add an /include/ to &lt;code&gt;.offlineimaprc&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[general]
pythonfile = ~/.offlineimap.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;~/.offlineimap.py&lt;/code&gt; just defines a single function called
&lt;code&gt;get_authinfo_password&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
import re, os

def get_authinfo_password(machine, login, port):
    s = &amp;quot;machine %s login %s password ([^ ]*) port %s&amp;quot; % (machine, login, port)
    p = re.compile(s)
    authinfo = os.popen(&amp;quot;gpg -q --no-tty -d ~/.authinfo.gpg&amp;quot;).read()
    return p.search(authinfo).group(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, all that&apos;s left is to change remotepass to something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remotepasseval = get_authinfo_password(&amp;quot;imap.gmail.com&amp;quot;, &amp;quot;username@gmail.com&amp;quot;, 993)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, &lt;code&gt;.authinfo.gpg&lt;/code&gt; should also have the corresponding entry:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;machine imap.gmail.com login username@gmail.com password &amp;lt;password&amp;gt; port 993
&lt;/code&gt;&lt;/pre&gt;
That&apos;s it, no more cleartext passwords.
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Sat, 26 Feb 2011 01:00:00 +0100</pubDate>
        </item>
        <item>
            <title>Upgrade Woes 2</title>
            <link>http://quotenil.com/upgrade-woes-2.html</link>
            <description>Debian Squeeze finally got Xorg 7.5 instead of the old and dusty 7.4.
The upgrade was as smooth as ever: &lt;a href=&quot;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=568872&quot; &gt;DPI is
off&lt;/a&gt;,
keyboard repeat for the Caps Lock key &lt;a href=&quot;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=568868&quot; &gt;does not survive
suspend/resume&lt;/a&gt;
and the trackpoint &lt;a href=&quot;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=568873&quot; &gt;stopped
working&lt;/a&gt;.
Synaptics click by tapping went away before the upgrade so that
doesn&apos;t count.
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Mon, 08 Feb 2010 01:00:00 +0100</pubDate>
        </item>
        <item>
            <title>Upgrade Woes</title>
            <link>http://quotenil.com/upgrade-woes.html</link>
            <description>&lt;p&gt;Debian Lenny was released back in February. My conservativeness only
lasts about half a year, so I decided to upgrade to Squeeze aka
Debian testing. The upgrade itself went rather smoothly with a few
notable exceptions. With KDE 4.3, I should have waited more.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Who thought it a grand idea that in the default theme (Oxygen) the
  color of the panel and window title bar cannot be customized?
  Installing the desktop theme called Aya solved the panel issue
  while going back to Keramik helped with the title bar.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The kmail message list is a train wreck by default with its
  multi-line entries. It took me ages to find how to turn it to back
  to classic theme (hint: it&apos;s not under `Configure KMail&apos;), at the
  cost of not threading messages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I had customized kwin to use the Super key for all shortcuts. KDE3
  decided to call it the Win key, but hey, I understand that&apos;s where
  it&apos;s often mapped. After the upgrade my settings were wiped out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In org-mode &lt;code&gt;C-u C-c C-t&lt;/code&gt; had asked for a new tag. After the upgrade
  and &lt;code&gt;(setq org-use-fast-todo-selection &apos;prefix)&lt;/code&gt; it does so again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The X.org upgrade broke my fragile xmodmap config so I wrote an
  &lt;a href=&quot;http://quotenil.com/blog-files/lisp-xkb.tar.gz&quot; &gt;xkb based config&lt;/a&gt; instead. It&apos;s
  activated with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xkbcomp -I$HOME/.xkb ~/.xkb/keymap/us_lisp $DISPLAY
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upgrading to Emacs23 was painless, except for blorg, which needed
  a couple of hacks to get this entry out the door.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Fri, 06 Nov 2009 01:00:00 +0100</pubDate>
        </item>
        <item>
            <title>Space Cadet</title>
            <link>http://quotenil.com/space-cadet.html</link>
            <description>&lt;p&gt;Emacs users often report problems caused by strain on the pinky
finger, which is used to press the &lt;em&gt;Control&lt;/em&gt; key. The standard
answer to that is to map &lt;em&gt;Caps Lock&lt;/em&gt; to &lt;em&gt;Control&lt;/em&gt;. I believe that
there is a better way:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://quotenil.com/blog-files/symbolics-keyboard.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Note the placement of modifiers: &lt;em&gt;Control&lt;/em&gt;, &lt;em&gt;Meta&lt;/em&gt;, &lt;em&gt;Super&lt;/em&gt;, &lt;em&gt;Hyper&lt;/em&gt;
on both sides of Space in this order, with &lt;em&gt;Control&lt;/em&gt; being the
closest to it. Touch typers especially find having two of each key
absolutely essential, and the symmetric placement appeals to me.&lt;/p&gt;
&lt;p&gt;Also note the &lt;em&gt;Rubout&lt;/em&gt; key next to &lt;em&gt;A&lt;/em&gt; where &lt;em&gt;Caps Lock&lt;/em&gt; resides on
modern keyboards. &lt;em&gt;Rubout&lt;/em&gt; is like &lt;em&gt;Backspace&lt;/em&gt; and is better to have
on the home row than the most useless and annoying key in history.&lt;/p&gt;
&lt;p&gt;Under X11, the above are the modifications I make to the default
layout. I keep the original Backspace key too as Backspace, but it
could be &lt;em&gt;Caps Lock&lt;/em&gt; as well: I don&apos;t use it either way. If you have
a narrow &lt;em&gt;Space&lt;/em&gt; key, you can place your thumbs on the two &lt;em&gt;Control&lt;/em&gt;
keys while the fingers rest on &lt;em&gt;ASDF&lt;/em&gt; and &lt;em&gt;JKL;&lt;/em&gt;. Always press
modifiers with the alternate hand. &lt;code&gt;C-a&lt;/code&gt; is right thumb + left
pinky, &lt;code&gt;C-M-p&lt;/code&gt; is left-thumb + left-ring + right-pinky. For &lt;code&gt;C-M-P&lt;/code&gt;,
add the left pinky for &lt;em&gt;Shift&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Another thing I find tremendously useful is getting used to &lt;code&gt;C-n&lt;/code&gt;,
&lt;code&gt;C-p&lt;/code&gt;, &lt;code&gt;C-b&lt;/code&gt;, &lt;code&gt;C-f&lt;/code&gt; instead of reaching for the arrow keys as often
as a vi user for &lt;em&gt;Escape&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Well, that&apos;s the narration. To implement the above, I guess, one can
create an xkb description, but last time I tried, documentation was
extremely unhelpful, so I ended up hacking together an xmodmap file.
I&apos;m told this file is not really portable, so it&apos;s &lt;a href=&quot;http://quotenil.com/blog-files/lisp-machine-pc105-us.xmodmap&quot; &gt;provided
here&lt;/a&gt; only for
illustration, and it&apos;s easy enough to do the same yourself for your
keyboard. To switch to the new layout do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xmodmap lisp-machine-pc105-us.xmodmap
xset r 66
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where the second command enables auto repeat on the fresh, new
&lt;em&gt;Backspace&lt;/em&gt; key. It works on a PC105 (with one Win key) notebook
keyboard.&lt;/p&gt;
&lt;p&gt;Oh, that xmodmap file above also has &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt; swapped.&lt;/p&gt;
&lt;strong&gt;2020-05-03&lt;/strong&gt; – Later on, I broke down and wrote an &lt;a href=&quot;https://github.com/melisgl/lisp-machine-xkb&quot; &gt;xkb
version&lt;/a&gt;.
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Mon, 15 Dec 2008 01:00:00 +0100</pubDate>
        </item>
        <item>
            <title>Backup</title>
            <link>http://quotenil.com/backup.html</link>
            <description>&lt;p&gt;My carefully updated list of files to back up had grown so long that
it made me worry about losing something important.&lt;/p&gt;
&lt;p&gt;The backup didn&apos;t fit on a single DVD, so I invested in a WD
Passport and created an encrypted file system on it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;modprobe cryptoloop
modprobe aes
losetup -e aes /dev/loop0 /dev/sdb
mke2fs /dev/loop0
tune2fs -i 0 -c 0 -j /dev/loop0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, taking a backup is an &lt;code&gt;rsync&lt;/code&gt; and some setup-up/tear-down code
away:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; #!/bin/sh
 set -e -x

 NAME=`hostname`

 modprobe cryptoloop
 modprobe aes

 cleanup () {
     umount /mnt/root-snapshot
     lvremove -f /dev/vg/snap
     umount /mnt/backup
     losetup -d /dev/loop0
 }

 cleanup || true

 losetup -e aes /dev/loop0 /dev/sdb
 mkdir -p /mnt/backup
 mount /dev/loop0 /mnt/backup

 lvcreate --size 2g --snapshot --name snap /dev/vg/root
 mkdir -p /mnt/root-snapshot
 mount /dev/vg/snap /mnt/root-snapshot -oro

 mkdir -p /mnt/backup/${name}
 # note the lack of trailing slash after /boot
 rsync -v -a --delete --one-file-system --sparse /mnt/root-snapshot/ \
   /boot /mnt/backup/${NAME}/

 cleanup
&lt;/code&gt;&lt;/pre&gt;
Note, that it&apos;s this easy since I basically have only one file
system (only &lt;code&gt;/boot&lt;/code&gt; is separate), and that resides on LVM, which
makes it trivial to snapshot.
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Fri, 28 Mar 2008 01:00:00 +0100</pubDate>
        </item>
        <item>
            <title>First Post</title>
            <link>http://quotenil.com/first-post.html</link>
            <description>&lt;p&gt;&lt;strong&gt;2020-05-05&lt;/strong&gt; – This blog was moved to PAX.&lt;/p&gt;
&lt;p&gt;After a long time of waiting to write my own blog
software like true hackers with infinite time do (and those
irritated by Wordpress), I bit the bullet and installed
&lt;a href=&quot;https://web.archive.org/web/20080610092633/http://lumiere.ens.fr/~guerry/blorg.html&quot; &gt;blorg&lt;/a&gt;,
a very low-overhead Emacs blog engine on top of
&lt;a href=&quot;http://orgmode.org/&quot; &gt;org-mode&lt;/a&gt;, that I happen to use as an
organizer. Blorg basically converts an org mode buffer to HTML
files, so it is completely static: send me
&lt;a href=&quot;mailto:mega@retes.hu&quot; &gt;email&lt;/a&gt; if you have comments, I have no desire
to maintain a more complex solution with comment filtering.&lt;/p&gt;
Small fixes had to be made for blorg to be able to deal with
org-mode 5.17a, and I only had time to bring it to some basic level
of functionality. That said, here is the
&lt;a href=&quot;http://quotenil.com/blog-files/blorg-init.el&quot; &gt;blorg-init.el&lt;/a&gt; file I&apos;m using right now.
</description>
            <author>mega@retes.hu (G&#xE1;bor Melis)</author>
            <pubDate>Fri, 01 Feb 2008 01:00:00 +0100</pubDate>
        </item>
    </channel>
</rss>